{"ast":null,"code":"import axios from 'axios';\nexport const REGISTER_USER_LOADING = 'REGISTER_USER_LOADING';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const REGISTER_USER_FAILED = 'REGISTER_USER_FAILED';\nexport const registerUserLoading = () => ({\n  type: REGISTER_USER_LOADING\n});\nexport const registerUserSuccess = data => ({\n  type: REGISTER_USER_SUCCESS,\n  payload: data\n});\nexport const registerUserFailure = error => ({\n  type: REGISTER_USER_FAILED,\n  payload: error\n});\nexport const LOGIN_USER_LOADING = 'LOGIN_USER_LOADING';\nexport const LOGIN_USER_SUCCESS = 'LOGIN_USER_SUCCESS';\nexport const LOGIN_USER_FAILED = 'LOGIN_USER_FAILED';\nexport const loginUserLoading = () => ({\n  type: LOGIN_USER_LOADING\n});\nexport const loginUserSuccess = data => ({\n  type: LOGIN_USER_SUCCESS,\n  payload: data\n});\nexport const loginUserFailure = error => ({\n  type: LOGIN_USER_FAILED,\n  payload: error\n});\nexport function loginUser(user) {\n  console.log('user', user);\n  return function (dispatch) {\n    dispatch(loginUserLoading());\n    return axios.post('https://lambda-budget-blocks.herokuapp.com/api/auth/login', user).then(response => {\n      sessionStorage.setItem('token', response.data.token);\n      dispatch(loginUserSuccess(response.data));\n    }).catch(error => {\n      dispatch(loginUserFailure(error));\n    });\n  };\n}\nexport function registerUser(data) {\n  return function (dispatch) {\n    dispatch(registerUserLoading());\n    return axios.post('https://lambda-budget-blocks.herokuapp.com/api/auth/register', data).then(response => {\n      dispatch(registerUserSuccess(response));\n    }).catch(error => {\n      dispatch(registerUserFailure(error));\n    });\n  };\n}","map":{"version":3,"sources":["/Users/vannasok/document/budget block/budget-blocks-fe/app/src/redux/actions/index.js"],"names":["axios","REGISTER_USER_LOADING","REGISTER_USER_SUCCESS","REGISTER_USER_FAILED","registerUserLoading","type","registerUserSuccess","data","payload","registerUserFailure","error","LOGIN_USER_LOADING","LOGIN_USER_SUCCESS","LOGIN_USER_FAILED","loginUserLoading","loginUserSuccess","loginUserFailure","loginUser","user","console","log","dispatch","post","then","response","sessionStorage","setItem","token","catch","registerUser"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,OAAO;AAAEC,EAAAA,IAAI,EAAEJ;AAAR,CAAP,CAA5B;AACP,OAAO,MAAMK,mBAAmB,GAAGC,IAAI,KAAK;AAC3CF,EAAAA,IAAI,EAAEH,qBADqC;AAE3CM,EAAAA,OAAO,EAAED;AAFkC,CAAL,CAAhC;AAIP,OAAO,MAAME,mBAAmB,GAAGC,KAAK,KAAK;AAC5CL,EAAAA,IAAI,EAAEF,oBADsC;AAE5CK,EAAAA,OAAO,EAAEE;AAFmC,CAAL,CAAjC;AAKP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,gBAAgB,GAAG,OAAO;AAAET,EAAAA,IAAI,EAAEM;AAAR,CAAP,CAAzB;AACP,OAAO,MAAMI,gBAAgB,GAAGR,IAAI,KAAK;AACxCF,EAAAA,IAAI,EAAEO,kBADkC;AAExCJ,EAAAA,OAAO,EAAED;AAF+B,CAAL,CAA7B;AAIP,OAAO,MAAMS,gBAAgB,GAAGN,KAAK,KAAK;AACzCL,EAAAA,IAAI,EAAEQ,iBADmC;AAEzCL,EAAAA,OAAO,EAAEE;AAFgC,CAAL,CAA9B;AAKP,OAAO,SAASO,SAAT,CAAmBC,IAAnB,EAAyB;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAApB;AACA,SAAO,UAASG,QAAT,EAAmB;AACzBA,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;AACA,WAAOd,KAAK,CACVsB,IADK,CACA,2DADA,EAC6DJ,IAD7D,EAELK,IAFK,CAEAC,QAAQ,IAAI;AACjBC,MAAAA,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAAgCF,QAAQ,CAACjB,IAAT,CAAcoB,KAA9C;AACAN,MAAAA,QAAQ,CAACN,gBAAgB,CAACS,QAAQ,CAACjB,IAAV,CAAjB,CAAR;AACA,KALK,EAMLqB,KANK,CAMClB,KAAK,IAAI;AACfW,MAAAA,QAAQ,CAACL,gBAAgB,CAACN,KAAD,CAAjB,CAAR;AACA,KARK,CAAP;AASA,GAXD;AAYA;AACD,OAAO,SAASmB,YAAT,CAAsBtB,IAAtB,EAA4B;AAClC,SAAO,UAASc,QAAT,EAAmB;AACzBA,IAAAA,QAAQ,CAACjB,mBAAmB,EAApB,CAAR;AACA,WAAOJ,KAAK,CACVsB,IADK,CAEL,8DAFK,EAGLf,IAHK,EAKLgB,IALK,CAKAC,QAAQ,IAAI;AACjBH,MAAAA,QAAQ,CAACf,mBAAmB,CAACkB,QAAD,CAApB,CAAR;AACA,KAPK,EAQLI,KARK,CAQClB,KAAK,IAAI;AACfW,MAAAA,QAAQ,CAACZ,mBAAmB,CAACC,KAAD,CAApB,CAAR;AACA,KAVK,CAAP;AAWA,GAbD;AAcA","sourcesContent":["import axios from 'axios';\n\nexport const REGISTER_USER_LOADING = 'REGISTER_USER_LOADING';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const REGISTER_USER_FAILED = 'REGISTER_USER_FAILED';\n\nexport const registerUserLoading = () => ({ type: REGISTER_USER_LOADING });\nexport const registerUserSuccess = data => ({\n\ttype: REGISTER_USER_SUCCESS,\n\tpayload: data\n});\nexport const registerUserFailure = error => ({\n\ttype: REGISTER_USER_FAILED,\n\tpayload: error\n});\n\nexport const LOGIN_USER_LOADING = 'LOGIN_USER_LOADING';\nexport const LOGIN_USER_SUCCESS = 'LOGIN_USER_SUCCESS';\nexport const LOGIN_USER_FAILED = 'LOGIN_USER_FAILED';\n\nexport const loginUserLoading = () => ({ type: LOGIN_USER_LOADING });\nexport const loginUserSuccess = data => ({\n\ttype: LOGIN_USER_SUCCESS,\n\tpayload: data\n});\nexport const loginUserFailure = error => ({\n\ttype: LOGIN_USER_FAILED,\n\tpayload: error\n});\n\nexport function loginUser(user) {\n\tconsole.log('user', user);\n\treturn function(dispatch) {\n\t\tdispatch(loginUserLoading());\n\t\treturn axios\n\t\t\t.post('https://lambda-budget-blocks.herokuapp.com/api/auth/login', user)\n\t\t\t.then(response => {\n\t\t\t\tsessionStorage.setItem('token', response.data.token);\n\t\t\t\tdispatch(loginUserSuccess(response.data));\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tdispatch(loginUserFailure(error));\n\t\t\t});\n\t};\n}\nexport function registerUser(data) {\n\treturn function(dispatch) {\n\t\tdispatch(registerUserLoading());\n\t\treturn axios\n\t\t\t.post(\n\t\t\t\t'https://lambda-budget-blocks.herokuapp.com/api/auth/register',\n\t\t\t\tdata\n\t\t\t)\n\t\t\t.then(response => {\n\t\t\t\tdispatch(registerUserSuccess(response));\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tdispatch(registerUserFailure(error));\n\t\t\t});\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}